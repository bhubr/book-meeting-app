{"version":3,"sources":["components/Calendar.jsx","components/Navbar.jsx","components/ChooseDateParagraph.jsx","App.js","firebase-config.js","serviceWorker.js","index.js"],"names":["dayLabels","monthLabels","areDateEqual","date1","date2","getYear","getMonth","getDate","MonthView","dowStart","currentMonth","renderDay","isDisabled","selectedDate","onSelectDate","today","Date","thisMonth","day","dates","date","setMonth","setDate","push","firstDow","getDay","rows","cells","dow","numEmpty","length","i","shift","count","className","key","Array","fill","map","d","ri","ci","classNames","empty","onClick","Calendar","setSelectedDate","useState","currentDate","setCurrentDate","currentYear","month","year","nextMonthStr","toString","nextDate","padStart","nextYear","nextMonth","defaultProps","Navbar","onLogout","role","aria-label","href","src","id","ChooseDateParagraph","availableSlots","App","isReady","setIsReady","isAdmin","setIsAdmin","currentUser","setUser","setToken","slots","setSlots","onReceiveSlots","data","value","val","nextSlots","Object","values","useEffect","firebase","auth","onAuthStateChanged","user","database","ref","on","uid","JSON","parse","admin","numFreeSlots","dateVal","toISOString","substr","bookedSlots","filter","isDateDisabled","setHours","getTime","onBookSlot","slot","bookedSlot","alert","window","confirm","time","newSlotKey","child","email","slotData","name","displayName","updates","update","confirmSlot","signOut","then","catch","error","message","selectedDateVal","find","getBookedSlot","isBookedByMe","innerContent","provider","GoogleAuthProvider","languageCode","signInWithPopup","result","token","credential","accessToken","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Boolean","location","hostname","match","initializeApp","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.cd46a540.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport './Calendar.css';\n\nconst dayLabels = ['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim'];\n\nconst monthLabels = [\n  'Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin',\n  'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre',\n];\n\nconst areDateEqual = (date1, date2) => {\n  if (!date1 || !date2) return false;\n  const dy = date1.getYear();\n  const ty = date2.getYear();\n  if (dy !== ty) return false;\n\n  const dm = date1.getMonth();\n  const tm = date2.getMonth();\n  if (dm !== tm) return false;\n\n  const dd = date1.getDate();\n  const td = date2.getDate();\n  return dd === td;\n}\n\nfunction MonthView({ dowStart, currentMonth, renderDay, isDisabled, selectedDate, onSelectDate }) {\n  const today = new Date();\n  const thisMonth = currentMonth;\n  let month = thisMonth;\n  let day = 1;\n  const dates = [];\n  while(true) {\n    const date = new Date();\n    date.setMonth(currentMonth);\n    date.setDate(day);\n    month = date.getMonth();\n    if (month > thisMonth) break;\n    day++;\n    dates.push(date);\n  }\n  const [first] = dates;\n  const firstDow = first.getDay();\n  const rows = [];\n  let cells = [];\n  for (let dow = dowStart; dow < firstDow; dow++) {\n    cells.push(null);\n  }\n  const numEmpty = cells.length;\n  for (let i = 0; i < 7 - numEmpty; i++) {\n    cells.push(dates.shift());\n  }\n  rows.push(cells);\n  cells = [];\n  let count = 0;\n  while (dates.length) {\n    cells.push(dates.shift());\n    count += 1;\n    if (count === 7) {\n      rows.push(cells);\n      cells = [];\n      count = 0;\n    }\n  }\n  if (count > 0) {\n    for (let i = count; i < 7; i++) {\n      cells.push(null);\n    }\n    rows.push(cells);\n  }\n  return (\n    <div>\n      <div className=\"Calendar__row columns\" key=\"header-row\">\n        {\n          new Array(7).fill(0).map((d, i) => (\n            <div key={`header-cell-${i}`} className=\"Calendar__cell--header column\">\n              {dayLabels[i]}\n            </div>\n          ))\n        }\n      </div>\n      {\n        rows.map((cells, ri) => (\n          <div className=\"Calendar__row columns\" key={`row-${ri}`}>\n          {\n            cells.map((date, ci) => (\n              <div\n                key={`cell-${ri}-${ci}`}\n                className={classNames('Calendar__cell', 'column', { empty: !date, 'Calendar__cell--today': date && areDateEqual(date, today), 'Calendar__cell--selected': date  && areDateEqual(date, selectedDate), 'Calendar__cell--disabled': !date || isDisabled(date) })}\n                onClick={() => date && !isDisabled(date) && onSelectDate(date)}\n              >\n              {date ? renderDay(date) : <span>&nbsp;</span>}\n              </div>\n            ))\n          }\n          </div>\n        ))\n      }\n    </div>\n  );\n}\n\nMonthView.defaultProps = {\n  dowStart: 1,\n};\n\nfunction Calendar({ renderDay, isDisabled, selectedDate, setSelectedDate }) {\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const currentMonth = currentDate.getMonth();\n  const currentYear = currentDate.getYear() + 1900;\n  const setDate = (month, year) => {\n    const nextMonthStr = (month + 1).toString();\n    const nextDate = new Date(`${year}-${nextMonthStr.padStart(2, '0')}-01`);\n    setCurrentDate(new Date(nextDate));\n  }\n  const decrementDate = () => {\n    let nextYear = currentYear;\n    let nextMonth = currentMonth;\n    if (currentMonth === 0) {\n      nextYear -= 1;\n      nextMonth = 11;\n    } else {\n      nextMonth -= 1;\n    }\n    setDate(nextMonth, nextYear);\n  }\n  const incrementDate = () => {\n    let nextYear = currentYear;\n    let nextMonth = currentMonth;\n    if (currentMonth === 11) {\n      nextYear += 1;\n      nextMonth = 0;\n    } else {\n      nextMonth += 1;\n    }\n    setDate(nextMonth, nextYear);\n  }\n  return (\n    <div className=\"Calendar\">\n      <div className=\"Calendar__monthSelector\">\n        <span className=\"Calendar__monthSelector__nav icon-chevron-left\" onClick={decrementDate} />\n        <span className=\"Calendar__monthSelector__value\">{monthLabels[currentMonth]} {currentYear}</span>\n        <span className=\"Calendar__monthSelector__nav icon-chevron-right\" onClick={incrementDate} />\n      </div>\n      <MonthView\n        currentMonth={currentMonth}\n        renderDay={renderDay}\n        isDisabled={isDisabled}\n        selectedDate={selectedDate}\n        onSelectDate={setSelectedDate}\n      />\n    </div>\n  )\n}\n\nconst defaultRenderDay = (date) => (\n  <span className=\"Calendar__day\">{date.getDate()}</span>\n);\n\nCalendar.defaultProps = {\n  renderDay: defaultRenderDay,\n};\n\nexport default Calendar;\n","import React from 'react';\n\nfunction Navbar({ onLogout }) {\n  return (\n    <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n    <div className=\"navbar-brand\">\n      <a className=\"navbar-item\" href=\"#\">\n        <img src=\"https://upload.wikimedia.org/wikipedia/commons/3/3b/Calendar-Logo-256x256.png\" />\n      </a>\n    </div>\n\n  <div id=\"navbarBasicExample\" className=\"navbar-menu\">\n    <div className=\"navbar-end\">\n      <div className=\"navbar-item\">\n        <div className=\"buttons\">\n          <a onClick={onLogout} className=\"button is-light\">\n            Déconnexion\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n</nav>\n  )\n}\n\nexport default Navbar;","import React from 'react';\n\nfunction ChooseDateParagraph() {\n  return (\n    <div className=\"card\">\n      <div className=\"card-content\">\n        Veuillez choisir une date dans le calendrier <span role=\"img\">😊</span>\n      </div>\n    </div>\n  );\n}\n\nexport default ChooseDateParagraph;","import React, { useState, useEffect } from 'react';\nimport firebase from 'firebase';\nimport classNames from 'classnames';\nimport Calendar from './components/Calendar';\nimport Navbar from './components/Navbar';\nimport ChooseDateParagraph from './components/ChooseDateParagraph';\nimport './App.css';\n\nconst availableSlots = [\n  '09:20', '10:10', '14:10', '15:00', '15:50', '16:40'\n];\n\nfunction App() {\n  const [isReady, setIsReady] = useState(false);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [currentUser, setUser] = useState(null);\n  const [token, setToken] = useState('');\n  const [slots, setSlots] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(null);\n\n  const onReceiveSlots = (data) => {\n    const value = data.val();\n    if (!value) return;\n    const nextSlots = Object.values(value);\n    setSlots(nextSlots);\n  };\n\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged(function(user) {\n      if (user) {\n        setUser(user);\n      }\n      setIsReady(true);\n    });\n    const slotsRef = firebase.database().ref('slots');\n    slotsRef.on('value', onReceiveSlots);\n  }, []);\n\n  useEffect(() => {\n    if (currentUser) {\n      const userRef = firebase.database().ref(`users/${currentUser.uid}`);\n      userRef.on('value', (data) => {\n        const value = data.val();\n        if (!value) return;\n        const { admin } = JSON.parse(value);\n        if (admin) setIsAdmin(true);\n      });\n    }\n  }, [currentUser]);\n\n  const onLogout = () => firebase.auth().signOut()\n    .then(function() {\n      setUser(null);\n    })\n    .catch(function(error) {\n      alert(error.message);\n    });\n\n  const onClickAuth = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    firebase.auth().languageCode = 'fr';\n    firebase.auth().signInWithPopup(provider).then(function(result) {\n      const token = result.credential.accessToken;\n      const user = result.user;\n      setToken(token);\n      setUser(user);\n    }).catch(function(error) {\n      alert(error.message);\n    });\n    \n  };\n  const numFreeSlots = (date) => {\n    const dateVal = date.toISOString().substr(0, 10);\n    const bookedSlots = slots.filter(({ date }) => date === dateVal);\n    return availableSlots.length - bookedSlots.length;\n  };\n  const getBookedSlot = (slot) => {\n    const selectedDateVal = selectedDate.toISOString().substr(0, 10);\n    return slots.find(({ date, time }) => date === selectedDateVal && time === slot);\n  };\n  const isDateDisabled = date => {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    return date.getDay() !== 3 || date.getTime() < today.getTime();\n  };\n  const confirmSlot = (time) => {\n    const newSlotKey = firebase.database().ref().child('slots').push().key;\n    const { uid, email, displayName: name } = currentUser;\n    const date = selectedDate.toISOString().substr(0, 10);\n    const slotData = {\n      uid, name, email, date, time,\n    };\n    // Write the new post's data simultaneously in the posts list and the user's post list.\n    const updates = {};\n    updates['/slots/' + newSlotKey] = slotData;\n\n    return firebase.database().ref().update(updates);\n  };\n  const onBookSlot = (slot, bookedSlot) => {\n    // Don't allow to book if already booked\n    if (bookedSlot) return;\n    // Look up booked slots for current user\n    const dateVal = selectedDate.toISOString().substr(0, 10);\n    const bookedSlots = slots.filter(\n      ({ uid, date }) => (uid === currentUser.uid && date === dateVal)\n    );\n    if (bookedSlots.length) {\n      alert('Vous avez déjà réservé un créneau pour ce jour !');\n      return;\n    }\n    if (window.confirm('Réserver ce créneau ?')) {\n      confirmSlot(slot);\n    }\n  };\n  if (!isReady) {\n    return (\n      <div className=\"Login__container\">\n        <span className=\"icon-spinner\" />\n      </div>\n    );\n  }\n  if (!currentUser) {\n    return (\n      <div className=\"Login__container\">\n        <button className=\"button is-danger\" onClick={onClickAuth}>\n          <span className=\"icon-google\" />\n          S&apos;authentifier avec Google\n        </button>\n      </div>\n    );\n  }\n  return (\n    <div className=\"App\">\n      <Navbar onLogout={onLogout} />\n      <div className=\"columns\">\n        <div className=\"column\">\n          <div className=\"card\">\n            <div className=\"card-content\">\n              <Calendar\n                isDisabled={isDateDisabled}\n                selectedDate={selectedDate}\n                setSelectedDate={setSelectedDate}\n                renderDay={\n                  (date) => (\n                    <span className=\"Calendar__day\">\n                      {\n                        !isDateDisabled(date) && numFreeSlots(date) > 0 && <span className=\"badge\">{numFreeSlots(date)}</span>\n                      }\n                      {date.getDate()}\n                    </span>\n                  )\n                }\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"column\">\n          {\n            selectedDate\n            ? availableSlots.map(time => {\n              const bookedSlot = getBookedSlot(time);\n              const isBookedByMe = bookedSlot && bookedSlot.uid === currentUser.uid;\n              const innerContent = bookedSlot\n                ? (\n                  <span>\n                    <span\n                      className={classNames({ 'Meeting__slot--booked': !isBookedByMe, 'Meeting__slot--isMine': isBookedByMe })}\n                    >{bookedSlot.time}</span>\n                    {' '}\n                    {\n                      isAdmin && <a href={`mailto:${bookedSlot.email}`}>{bookedSlot.name}</a>\n                    }\n                  </span>\n                )\n                : time;\n              return (\n                <div\n                  key={time}\n                  className={classNames('Meeting__slot', 'card')}\n                  onClick={() => onBookSlot(time, bookedSlot)}\n                >\n                  <div className=\"card-content Meeting__slot__content\">{innerContent}</div>\n                </div>\n              );\n            })\n            : <ChooseDateParagraph />\n          }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const firebaseConfig = {\n  apiKey: \"AIzaSyAiOCNMC1IMYw_DDWBsD6ci34Sprme-p2U\",\n  authDomain: \"calendarapp-eee82.firebaseapp.com\",\n  databaseURL: \"https://calendarapp-eee82.firebaseio.com\",\n  projectId: \"calendarapp-eee82\",\n  storageBucket: \"calendarapp-eee82.appspot.com\",\n  messagingSenderId: \"609612855491\",\n  appId: \"1:609612855491:web:826189c7044c44cff3ca76\"\n};\n\nexport default firebaseConfig;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport firebase from 'firebase';\nimport 'bulma/css/bulma.min.css';\nimport '@creativebulma/bulma-badge/dist/bulma-badge.min.css';\nimport App from './App';\nimport firebaseConfig from './firebase-config';\nimport * as serviceWorker from './serviceWorker';\n\nfirebase.initializeApp(firebaseConfig);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}